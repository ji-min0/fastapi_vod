name: CI

on:
  push:

jobs:
  static-analysis: #mypy, black, ruff 등 정적 분석
    runs-on: ubuntu-22.04 # 실제 프로덕션에서는 모든 버전을 고정하는 것이 좋다. (예기치 못한 버전 장애를 막기 위해)
    steps:
      - name: Check out the codes
        uses: actions/checkout@v2

      - name: Setup python environment
        id: setup-python
        uses: actions/setup-python@v2
        with:
          python-version: "3.13"

      - name: Cache Poetry
        id: cache-poetry
        uses: actions/cache@v4
        with:
          key: poetry-1.8.5
          path: ~/.local/ # poetry 는 ~/.local 에 설치되므로, 해당 디렉터리를 캐시한다.

      - name: Install Poetry
        if: steps.cache-poetry.outputs.cache-hit != 'ture' # cache 불러오기 실패 > 설치
        run: |
          curl -sSL https://install.python-poetry.org | python3 - --version 1.8.5

      - name: Register Poetry bin
        run: echo "${HOME}/.poetry/bin" >> $GITHUB_PATH # 경로 지정

      - name: Cache dependencies
        id: cache-venv
        uses: actions/cache@v4
        with:
          # 파이썬 버전이 바뀌었을 때, lock 파일이나 toml 파일이 바뀌었을때 종속성을 재설치합니다.
          # 바뀐 것이 없는 경우에는 캐싱된 종속성을 사용합니다.
          key: python-${{ steps.setup-python.outputs.python-version }}-poetry-lock-${{ hashFiles('poetry.lock') }}-toml-${{ hashFiles('pyproject.toml') }}-poetry-1.8.5
          path: /home/runner/.cache/pypoetry/virtualenvs/

      - name: Install dependencies
        if: steps.cache-venv.outputs.cache-hit != 'true'
        run: poetry install --no-root

      - name: Run Black
        run: poetry run black . --check

      - name: Run Ruff
        run: |
          poetry run ruff check --select I
          poetry run ruff check

      - name: Run Mypy
        run: poetry run mypy .


# 전체 테스트 실행
  test:
    runs-on: ubuntu-22.04
    steps:
      - name: Check out the codes
        uses: actions/checkout@v2

      - name: Setup python environment
        id: setup-python
        uses: actions/setup-python@v2
        with:
          python-version: "3.13"

      - name: Cache Poetry
        id: cache-poetry
        uses: actions/cache@v4
        with:
          key: poetry-1.8.5
          path: ~/.local

      - name: Install Poetry
        if: steps.cache-poetry.outputs.cache-hit != 'true'
        run: |
          curl -sSL https://install.python-poetry.org | python3 - --version 1.8.5

      - name: Register Poetry bin
        run: echo "${HOME}/.poetry/bin" >> $GITHUB_PATH

      - name: Cache dependencies
        id: cache-venv
        uses: actions/cache@v4
        with:
          key: python-${{ steps.setup-python.outputs.python-version }}-poetry-lock-${{ hashFiles('poetry.lock') }}-toml-${{ hashFiles('pyproject.toml') }}-poetry-1.8.5
          path: /home/runner/.cache/pypoetry/virtualenvs/

      - name: Install dependencies
        if: steps.cache-venv.outputs.cache-hit != 'true'
        run: poetry install --no-root

      - name: Checkout code
        uses: actions/checkout@v4

      # 1. EdgeDB 설치 디렉터리 전체를 올바른 경로로 캐시합니다.
      - name: Cache EdgeDB CLI
        id: cache-edgedb-cli
        uses: actions/cache@v4
        with:
          path: ~/.edgedb
          key: edgedb-cli-v1-${{ runner.os }}

      # (디버깅용) 캐시가 실패했을 때 설치하기 전에 홈 디렉터리 목록을 확인
      - name: Check directory before install (if cache missed)
        if: steps.cache-edgedb-cli.outputs.cache-hit != 'true'
        run: |
          echo "Cache missed. Will install EdgeDB."
          echo "--- Home directory contents ---"
          ls -la $HOME

      - name: Setup EdgeDB
        if: steps.cache-edgedb-cli.outputs.cache-hit != 'true'
        uses: geldata/setup-gel@v1

      # (디버깅용) 설치 후 edgedb 폴더가 정말 생성되었는지 확인
      - name: Check directory after install
        if: steps.cache-edgedb-cli.outputs.cache-hit != 'true'
        run: |
          echo "--- Home directory contents after install ---"
          ls -la $HOME
          echo "--- ~/.edgedb directory contents ---"
          ls -la ~/.edgedb

      # 3. 설치 또는 캐시 복원 후 edgedb 실행 경로를 PATH에 추가
      - name: Add EdgeDB to PATH
        run: echo "$HOME/.edgedb/bin" >> $GITHUB_PATH

      # 4. 설치 확인
      - name: Verify EdgeDB installation
        run: edgedb --version


      - name: Run tests
        run: |
          poetry run coverage run -m pytest .
          poetry run coverage report -m